<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.java.MemberMapper">

	<!-- 회원정보 입력 -->
	<insert id='insertMember' parameterType="com.java.domain.MemberVO">
		INSERT INTO m_member(m_id, m_pass, m_name, m_tel, m_email, m_point, m_addr, m_postcode)
		VALUES(#{m_id}, #{m_pass}, #{m_name}, #{m_tel}, #{m_email}, 4000, #{m_addr}, #{m_postcode})
	</insert>
	
	<!-- 아이디 중복 확인 -->
	<select id="selectcheckIdMember" parameterType="com.java.domain.MemberVO" resultType="int">
		SELECT count(*) FROM m_member WHERE m_id = #{m_id}
	</select>

	<!-- 로그인 확인 -->
	<select id='loginCheck' parameterType="com.java.domain.MemberVO" resultType="com.java.domain.MemberVO">
		SELECT * FROM m_member WHERE m_id=#{m_id} AND m_pass=#{m_pass}
		
	</select>
	
	<!-- 전체회원관리에서 총 회원수 리스 -->
	<select id="member_all" parameterType="com.java.domain.MemberVO" resultType="com.java.domain.MemberVO">
		SELECT * FROM m_member
	</select>
	
	<!-- 회원목록 리스트 -->
	<select id='member_dash' parameterType="com.java.domain.MemberVO" resultType="com.java.domain.MemberVO">
		SELECT * FROM m_member LIMIT 3;
	</select>
	
	<!-- 포인트 관리 페이지에서 해당 아이디 정보 가져오기 -->
	<select id='member_point_detail' parameterType="com.java.domain.MemberVO" resultType="com.java.domain.MemberVO">
		SELECT * FROM m_member WHERE m_id=#{m_id}
	</select>
	<!-- 포인트 차감 -->
	<update id='member_point_content' parameterType="com.java.domain.MemberVO">
		UPDATE m_member SET  m_point=m_point+#{m_point} WHERE m_id=#{m_id}
	</update>
	
	<!-- 해당 이메일이 있는지 확인 -->
	<select id="selectMember" parameterType="String" resultType="com.java.domain.MemberVO">
		SELECT * FROM m_member WHERE m_email=#{m_email}
	</select>
	
	<!-- 패스워드변경 -->
	<update id="pwUpdate_M" parameterType="com.java.domain.MemberVO">
		UPDATE m_member SET m_pass=#{m_pass} WHERE m_email= #{m_email}
	</update>
	
	<!-- 회원 수정 시 정보 불러오기 -->
	<select id="member_detail" parameterType="String" resultType="com.java.domain.MemberVO">
		SELECT * FROM m_member WHERE m_id=#{m_id}
	</select>
	
	<!-- 회원 정보 수정 -->
	<update id="update_member" parameterType="com.java.domain.MemberVO">
		UPDATE m_member SET m_pass=#{m_pass}, m_name=#{m_name}, m_email=#{m_email}, m_tel=#{m_tel}, m_postcode=#{m_postcode}, m_addr=#{m_addr}  WHERE m_id=#{m_id}
	</update>
	
	<!-- 찜 목록 저장 -->
	<insert id="product_wishlist" parameterType="com.java.domain.WishListVO">
		INSERT INTO wishlist (m_id, p_selid, p_name, p_price, wishstate, p_imgrn) VALUES (#{m_id}, #{p_selid}, #{p_name}, #{p_price}, 1, #{p_imgrn})
	</insert>
	
	<!-- 해당 m_id의 찜 목록 보이기 -->
	<select id="wishlist_all" parameterType="com.java.domain.WishListVO" resultType="com.java.domain.WishListVO">
		SELECT * FROM wishlist WHERE m_id=#{m_id}
	</select>
	
	
	<!-- 찜 목록 삭제 -->
	<delete id="delete_wishlist" parameterType="com.java.domain.WishListVO">
		DELETE FROM wishlist WHERE p_selid = #{p_selid}
	</delete>
	
	<!-- 장바구니 추가 -->
	<insert id="add_to_cart" parameterType="com.java.domain.CartVO">
		INSERT INTO CART (m_id, cart_cnt, p_optionID, o_name, p_name, p_price, shopping_total) 
		VALUES (#{m_id}, #{cart_cnt}, #{p_optionID}, #{o_name}, #{p_name}, #{p_price}, #{cart_cnt}*#{p_price})
	</insert>

	<!-- 장바구니 내역 보이기 -->
	<select id="shopping_cart" parameterType="com.java.domain.CartViewVO" resultType="com.java.domain.CartViewVO">
		SELECT c.cartnum cartnum, c.m_id m_id, 
		c.cart_cnt cart_cnt, c.o_name o_name, c.p_name p_name, c.p_price p_price, p.p_imgrn p_imgrn,
		m.m_point m_point, c.p_price*cart_cnt shopping_total
		FROM cart c
		INNER JOIN p_product p ON c.p_name = p.p_name
		INNER JOIN m_member m ON c.m_id = m.m_id
		WHERE m.m_id = #{m_id};
	</select>	

	<!-- 장바구니 중복 확인 -->
	<select id="alreadyInCartList" parameterType="com.java.domain.CartVO" resultType="int">
	    SELECT 
	      COUNT(*)
	    FROM cart
	    WHERE o_name = #{o_name} AND m_id=#{m_id}
	</select>
	
	<!-- 장바구니 수량 올리기 -->
	<update id="plusCartCnt" parameterType="com.java.domain.CartVO">
		UPDATE cart 
		SET cart_cnt=#{cart_cnt}, shopping_total=#{cart_cnt}*#{p_price} 
		WHERE o_name=#{o_name} AND m_id=#{m_id}
	</update>
	
	<!-- 장바구니 수량 내리기 -->
	<update id="minusCartCnt" parameterType="com.java.domain.CartVO">
		UPDATE cart 
		SET cart_cnt=#{cart_cnt}, shopping_total=#{cart_cnt}*#{p_price} 
		WHERE o_name=#{o_name} AND m_id=#{m_id}
	</update>
	
	<!-- 장바구니 총합계 -->
	<select id="cart_total" parameterType="com.java.domain.CartVO" resultType="String">
		SELECT sum(shopping_total) cart_total FROM cart WHERE m_id=#{m_id}
	</select>
	
	<!-- 장바구니 삭제 : 이미지 클릭 시 삭제 -->
	<delete id="removeCartItem" parameterType="com.java.domain.CartVO">
		DELETE FROM cart WHERE o_name=#{o_name}
	</delete>

	<!-- 세션 아이디에 해당하는 회원 정보 불러오기 : 주문서 -->
	<select id="member-info" parameterType="com.java.domain.MemberVO" resultType="com.java.domain.MemberVO">
		SELECT * FROM m_member WHERE m_id=#{m_id}
	</select>
	
	<!-- 주문 내역 넣기 -->
	<insert id="insertOrder" parameterType="com.java.domain.OrderVO">
		INSERT INTO o_order (o_id, m_id, o_date, o_status, rc_name, rc_tel, rc_postcode, rc_addr, pay_amount, pay_by) 
		VALUES 
		( #{o_id}, #{m_id}, now(), '결제완료', 
		#{rc_name}, #{rc_tel}, #{rc_postcode}, #{rc_addr}, #{pay_amount}, #{pay_by} )
	</insert>
	
	<!-- 결제 내역 넣기 -->
	<insert id="insertPayInfo" parameterType="com.java.domain.PayInfoVO">
		INSERT INTO pay_info (o_id, pay_by, pay_acc, pay_amount, m_name) 
	    VALUES 
	    <if test="pay_by == 'card_acc'">
	        (#{o_id}, #{pay_by}, 0 ,#{pay_amount}, #{m_name})
	    </if>
	    <if test="pay_by == 'bank_acc'">
	        (#{o_id}, #{pay_by}, #{pay_acc}, #{pay_amount}, #{m_name})    
	    </if>
	</insert>
	
	<!-- 주문 아이템 넣기 -->
	<insert id="insertOrderItem" parameterType="com.java.domain.OrderItemVO">
	    INSERT INTO order_item (o_id, p_optionID, cart_cnt) 
	    SELECT #{o_id}, p_optionID, cart_cnt FROM cart WHERE m_id = #{m_id}
	</insert>
	
	<!-- 주문 후 장바구니 삭제 -->
	<delete id="cartAllDelete" parameterType="com.java.domain.CartVO">
		DELETE FROM cart WHERE m_id = #{m_id}
	</delete>
	
	<!-- 주문 내역 리스트 대분류 별 구매 내역 -->
	<select id="fstOrder" parameterType="com.java.domain.LogVO" resultType="com.java.domain.LogVO">
		SELECT f.fstdivname fstdivname, count(*) AS cnt 
		FROM order_item oi INNER JOIN p_option po ON oi.p_optionID = po.p_optionID 
		INNER JOIN trddiv t ON po.trddivid = t.trddivid 
		INNER JOIN snddiv s ON t.snddivid  = s.snddivid 
		INNER JOIN fstdiv f ON s.fstdivid  = f.fstdivid
		WHERE SUBSTRING(oi.p_optionID, 1, 1) = f.fstdivid
		GROUP BY f.fstdivname;
	</select>
	
	
</mapper>